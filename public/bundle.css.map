{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.svelte",
    "..\\src\\Quiz.svelte",
    "..\\src\\Question.svelte",
    "..\\src\\Modal.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Quiz from \"./Quiz.svelte\";\n</script>\n\n<style>\n  :global(body) {\n    background: #524763;\n  }\n\n  h1 {\n    color: white;\n    text-align: center;\n  }\n\n  div {\n    background: white;\n    border-radius: 15px;\n    padding: 40px;\n  }\n</style>\n\n<h1>Level Up Music</h1>\n<div>\n  <Quiz />\n</div>\n",
    "<script>\n  import { fade, blur, fly, slide, scale } from \"svelte/transition\";\n  import { onMount, beforeUpdate, afterUpdate, onDestroy } from \"svelte\";\n  import Question from \"./Question.svelte\";\n  import Modal from \"./Modal.svelte\";\n  import { score } from \"./store.js\";\n  let activeQuestion = 0;\n  let quiz = getQuiz();\n  let isModalOpen = false;\n\n  onMount(() => {\n    console.log(\"i mounted\");\n  });\n\n  beforeUpdate(() => {\n    console.log(\"before update\");\n  });\n\n  afterUpdate(() => {\n    console.log(\"after update\");\n  });\n\n  async function getQuiz() {\n    const res = await fetch(\n      \"https://opentdb.com/api.php?amount=10&category=12&type=multiple\"\n    );\n    const quiz = await res.json();\n    return quiz;\n  }\n\n  function nextQuestion() {\n    activeQuestion = activeQuestion + 1;\n  }\n\n  function resetQuiz() {\n    isModalOpen = false;\n    score.set(0);\n    activeQuestion = 0;\n    quiz = getQuiz();\n  }\n\n  // Reactive Statement\n  $: if ($score > 7) {\n    isModalOpen = true;\n  }\n\n  // Reactive Declaration\n  $: questionNumber = activeQuestion + 1;\n</script>\n\n<style>\n  .fade-wrapper {\n    position: absolute;\n  }\n  .container {\n    min-height: 500px;\n  }\n</style>\n\n<div>\n  <button on:click={resetQuiz}>Start New Quiz</button>\n\n  <h3>My Score: {$score}</h3>\n  <h4>Question #{questionNumber}</h4>\n\n  <div class=\"container\">\n\n    {#await quiz}\n      Loading....\n    {:then data}\n\n      {#each data.results as question, index}\n        {#if index === activeQuestion}\n          <div in:fly={{ x: 100 }} out:fly={{ x: -200 }} class=\"fade-wrapper\">\n            <Question {nextQuestion} {question} />\n          </div>\n        {/if}\n      {/each}\n\n    {/await}\n  </div>\n</div>\n\n{#if isModalOpen}\n  <Modal on:close={resetQuiz}>\n    <h2>You won!</h2>\n    <p>Congratulations</p>\n    <button on:click={resetQuiz}>Start Over</button>\n  </Modal>\n{/if}\n",
    "<script>\n  import { score } from \"./store.js\";\n\n  export let question;\n  export let nextQuestion;\n\n  let isCorrect;\n  let isAnswered = false;\n  let answers = question.incorrect_answers.map(answer => {\n    return {\n      answer,\n      correct: false\n    };\n  });\n  let allAnswers = [\n    ...answers,\n    {\n      answer: question.correct_answer,\n      correct: true\n    }\n  ];\n  shuffle(allAnswers);\n\n  function shuffle(array) {\n    array.sort(() => Math.random() - 0.5);\n  }\n\n  function checkQuestion(correct) {\n    if (!isAnswered) {\n      isAnswered = true;\n      isCorrect = correct;\n      if (correct) {\n        score.update(val => val + 1);\n      }\n    }\n  }\n</script>\n\n<style>\n  h5 {\n    color: blueviolet;\n  }\n\n  h5.wrong {\n    color: red;\n  }\n\n  h5.isCorrect {\n    color: green;\n  }\n\n  .answer {\n    display: block;\n  }\n</style>\n\n<h3>\n  {@html question.question}\n</h3>\n{#if isAnswered}\n  <h5 class:isCorrect class:wrong={!isCorrect}>\n    {#if isCorrect}You got it right{:else}You goofed up{/if}\n  </h5>\n{/if}\n\n{#each allAnswers as answer}\n  <button\n    class=\"answer\"\n    disabled={isAnswered}\n    on:click={() => checkQuestion(answer.correct)}>\n    {@html answer.answer}\n  </button>\n{/each}\n\n{#if isAnswered}\n  <div>\n    <button on:click={nextQuestion}>Next Question</button>\n  </div>\n{/if}\n",
    "<script>\n  import { fly, fade } from \"svelte/transition\";\n  import { createEventDispatcher } from \"svelte\";\n  let w;\n  const dispatch = createEventDispatcher();\n</script>\n\n<style lang=\"scss\">.modal-bg {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.8); }\n  .modal-bg .modal {\n    background: white;\n    padding: 20px;\n    border-radius: 15px; }\n\n/*# sourceMappingURL=Modal.svelte.css.map */</style>\n\n<div class=\"modal-bg\" transition:fade bind:clientWidth={w}>\n  <div class=\"modal\" transition:fly={{ y: -100 }}>\n    <button\n      on:click={() => {\n        dispatch('close');\n      }}>\n      Close\n    </button>\n    <!-- <slot>optional fallback</slot> -->\n    <slot />\n    <!-- <slot name=\"modal\" /> -->\n  </div>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAKU,IAAI,AAAE,CAAC,AACb,UAAU,CAAE,OAAO,AACrB,CAAC,AAED,EAAE,cAAC,CAAC,AACF,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,GAAG,cAAC,CAAC,AACH,UAAU,CAAE,KAAK,CACjB,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,IAAI,AACf,CAAC;ACiCD,aAAa,cAAC,CAAC,AACb,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACD,UAAU,cAAC,CAAC,AACV,UAAU,CAAE,KAAK,AACnB,CAAC;ACjBD,EAAE,eAAC,CAAC,AACF,KAAK,CAAE,UAAU,AACnB,CAAC,AAED,EAAE,MAAM,eAAC,CAAC,AACR,KAAK,CAAE,GAAG,AACZ,CAAC,AAED,EAAE,UAAU,eAAC,CAAC,AACZ,KAAK,CAAE,KAAK,AACd,CAAC,AAED,OAAO,eAAC,CAAC,AACP,OAAO,CAAE,KAAK,AAChB,CAAC;AC9CgB,SAAS,cAAC,CAAC,AAC5B,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,CAAC,CACT,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AAAE,CAAC,AACjC,uBAAS,CAAC,MAAM,cAAC,CAAC,AAChB,UAAU,CAAE,KAAK,CACjB,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,IAAI,AAAE,CAAC"
}